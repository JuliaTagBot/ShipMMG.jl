var documenterSearchIndex = {"docs":
[{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = ShipMMG","category":"page"},{"location":"index.html#ShipMMG","page":"Home","title":"ShipMMG","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Documentation for ShipMMG.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Modules = [ShipMMG]","category":"page"},{"location":"index.html#ShipMMG.Mmg3DofBasicParams","page":"Home","title":"ShipMMG.Mmg3DofBasicParams","text":"Basic parameters of target ship for MMG 3DOF simulation.\n\nArguments\n\nL_pp::Float64: L_pp\nB::Float64: \nd::Float64:\nx_G::Float64: \nD_p::Float64: \nm::Float64: \nI_zG::Float64: \nA_R::Float64: \nη::Float64: \nm_x::Float64: \nm_y::Float64: \nJ_z::Float64: \nf_α::Float64: \nϵ::Float64: \nt_R::Float64: \na_H::Float64: \nx_H::Float64: \nγ_R_minus::Float64: \nγ_R_plus::Float64: \nl_R::Float64: \nκ::Float64: \nt_P::Float64: \nw_P0::Float64: \nx_P::Float64: \n\n\n\n\n\n","category":"type"},{"location":"index.html#ShipMMG.Mmg3DofManeuveringParams","page":"Home","title":"ShipMMG.Mmg3DofManeuveringParams","text":"Maneuvering parameters of target ship for MMG 3DOF simulation.\n\nArguments\n\nk_0::Float64\nk_1::Float64\nk_2::Float64\nR_0_dash::Float64\nX_vv_dash::Float64\nX_vr_dash::Float64\nX_rr_dash::Float64\nX_vvvv_dash::Float64\nY_v_dash::Float64\nY_r_dash::Float64\nY_vvv_dash::Float64\nY_vvr_dash::Float64\nY_vrr_dash::Float64\nY_rrr_dash::Float64\nN_v_dash::Float64\nN_r_dash::Float64\nN_vvv_dash::Float64\nN_vvr_dash::Float64\nN_vrr_dash::Float64\nN_rrr_dash::Float64\n\n\n\n\n\n","category":"type"},{"location":"index.html#ShipMMG.draw_gif_result","page":"Home","title":"ShipMMG.draw_gif_result","text":"draw_gif_result(time, x, y, ψ, shape, file_path, [, fps]) -> gif\n\nDraw the gif animation from simulation result.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ShipMMG.kt_model!-NTuple{4, Any}","page":"Home","title":"ShipMMG.kt_model!","text":"kt_model!(dX, X, p, t)\n\nKT model on DifferentialEquations.ODEProblem. Update dX.\n\nArguments\n\ndX: [du, dr, dδ]\nX: the initial state values. [u, r, δ].\np: the parameters and δ spline info. [K, T, spl_δ].\nt: the time.\n\nExamples\n\njulia> K_log = 0.155  # [1/s]\njulia> T_log = 80.5  # [s]\njulia> u0 = 20 * (1852.0 / 3600)  # [m/s] (knot * 1852/3600)\njulia> duration = 50  # [s]\njulia> sampling = 1001\njulia> time_list = range(0.0,stop=duration,length=sampling)\njulia> Ts = 50.0\njulia> δ_list = 10.0 * pi / 180.0  * sin.(2.0 * pi / Ts * time_list) # [rad]\njulia> spl_δ = Spline1D(time_list, δ_list)\njulia> X0 = [u0; 0.0; δ_list[1]]\njulia> p = [K_log, T_log, spl_δ]\njulia> prob = ODEProblem(kt_model!, X0, (time_list[1], time_list[end]), p)\njulia> sol = solve(prob, Tsit5(), saveat=time_list[2] - time_list[1])\n\n\n\n\n\n","category":"method"},{"location":"index.html#ShipMMG.kt_simulate-Tuple{Any, Any, Float64, Float64}","page":"Home","title":"ShipMMG.kt_simulate","text":"kt_simulate(time_list, δ_list, K, T, [, u0, r0, algorithm, reltol, abstol])\n\nReturns the KT simulation results.\n\nArguments\n\ntime_list: the list of simulatino time.\nδ_list: the list of rudder angle [rad].\nK::Float64: the K Parameter.\nT::Float64: the T Parameter.\nu0::Float64=0.0: the constant surge velocity.\nr0::Float64=0.0: the inital rate of turn [rad/s].\nalgorithm=Tsit5(): the parameter of DifferentialEquations.ODEProblem.solve()\nreltol=1e-8: the parameter of DifferentialEquations.ODEProblem.solve()\nabstol=1e-8: the parameter of DifferentialEquations.ODEProblem.solve()\n\nExamples\n\nKT simulation.\n\njulia> K_log = 0.155  # [1/s]\njulia> T_log = 80.5  # [s]\njulia> u0 = 20 * (1852.0 / 3600)  # [m/s] (knot * 1852/3600)\njulia> duration = 50  # [s]\njulia> sampling = 1001\njulia> time_list = range(0.0,stop=duration,length=sampling)\njulia> Ts = 50.0\njulia> δ_list = 10.0 * pi / 180.0  * sin.(2.0 * pi / Ts * time_list) # [rad]\njulia> time, u, r, δ = kt_simulate(time_list, δ_list, K_log, T_log, u0=u0)\n\n\n\n\n\n","category":"method"},{"location":"index.html#ShipMMG.kt_zigzag_test-NTuple{6, Float64}","page":"Home","title":"ShipMMG.kt_zigzag_test","text":"kt_zigzag_test(K, T, target_δ_rad, target_ψ_rad_deviation, time_second_interval, end_time_second, [, u0, r0, ψ0, δ0, δ_rad_rate, start_time_second, algorithm, reltol, abstol])\n\nReturns the KT simulation results.\n\nArguments\n\nK::Float64: the K Parameter.\nT::Float64: the T Parameter.\ntarget_δ_rad::Float64: target rudder angle of zigzag test.\ntarget_ψ_rad_deviation::Float64: target azimuth deviation of zigzag test.\ntime_second_interval::Float64: time interval of output result.\nend_time_second::Float64: the end time of simulation.\nu0::Float64=0.0: the initial & constant surge velocity.\nr0::Float64=0.0: the initial rate of turn [rad/s].\nψ0::Float64=0.0: the initial azimuth.\nδ0::Float64=0.0: the initial rudder angle.\nδ_rad_rate::Float64=10.0*π/180: the change rate of rudder angle [rad/s]. \nstart_time_second::Float64=0.0: the start time of simulation.\nalgorithm=Tsit5(): the parameter of DifferentialEquations.ODEProblem.solve()\nreltol=1e-8: the parameter of DifferentialEquations.ODEProblem.solve()\nabstol=1e-8: the parameter of DifferentialEquations.ODEProblem.solve()\n\nExamples\n\nKT simulation.\n\njulia> K = 0.155\njulia> T = 80.5\njulia> target_δ_rad = 30.0 * π / 180.0\njulia> target_ψ_rad_deviation = 10.0 * π / 180.0\njulia> time_second_interval = 0.01\njulia> end_time_second = 500.0\njulia> u0 = 20 * (1852.0 / 3600) # [knot]\njulia> δ_list, r_list, ψ_list = kt_zigzag_test(\n        K,\n        T,\n        target_δ_rad,\n        target_ψ_rad_deviation,\n        time_second_interval,\n        end_time_second,\n        u0 = u0,\n    )\n\n\n\n\n\n","category":"method"},{"location":"index.html#ShipMMG.mmg_3dof_model!-NTuple{4, Any}","page":"Home","title":"ShipMMG.mmg_3dof_model!","text":"mmg_3dof_model!(dX, X, p, t)\n\nMMG 3DOF model on DifferentialEquations.ODEProblem. Update dX.\n\nArguments\n\ndX: [du, dv, dr, dδ, dnpm]\nX: the initial state values. [u, v, r, δ, npm].\np: ρ and the basic & maneuvering parameters and δ & npm spline info.\nρ\nL_pp\nB\nd\nx_G\nD_p\nm\nI_zG\nA_R\nη\nm_x\nm_y\nJ_z\nf_α\nϵ\nt_R\na_H\nx_H\nγRminus\nγRplus\nl_R\nκ\nt_P\nw_P0\nx_P\nk_0\nk_1\nk_2\nR0dash\nXvvdash\nXvrdash\nXrrdash\nXvvvvdash\nYvdash\nYrdash\nYvvvdash\nYvvrdash\nYvrrdash\nYrrrdash\nNvdash\nNrdash\nNvvvdash\nNvvrdash\nNvrrdash\nNrrrdash\nspl_δ\nspl_npm\nt: the time.\n\n\n\n\n\n","category":"method"},{"location":"index.html#ShipMMG.mmg_3dof_simulate-Tuple{Any, Any, Any, Mmg3DofBasicParams, Mmg3DofManeuveringParams}","page":"Home","title":"ShipMMG.mmg_3dof_simulate","text":"mmg_3dof_simulate(time_list, npm_list, δ_list, basic_params, maneuvering_params, [, u0, v0, r0, ρ, algorithm, reltol, abstol]) -> time, u, v, r, δ, npm\n\nReturns the MMG 3DOF simulation results including the lists of time, u, v, r, δ, npm. This function has the same logic of ShipMMG.simulate().\n\nArguments\n\ntime_list: the list of simulatino time.\nnpm_list: the list of propeller rpm.\nδ_list: the list of rudder angle [rad].\nbasic_params::Mmg3DofBasicParams: the basic parameters of target ship.\nmaneuvering_params::Mmg3DofManeuveringParams: the maneuvering parameters of target ship.\nu0::Float64=0.0: the initial x (surge) velocity.\nv0::Float64=0.0: the initial y (sway) velocity.\nr0::Float64=0.0: the initial rate of turn [rad/s].\nρ::Float64=1.025: the seawater density [g/cm^3].\nalgorithm=Tsit5(): the parameter of DifferentialEquations.ODEProblem.solve()\nreltol=1e-8: the parameter of DifferentialEquations.ODEProblem.solve()\nabstol=1e-8: the parameter of DifferentialEquations.ODEProblem.solve()\n\nExamples\n\nKVLCC2_L7 turning test.\n\njulia> ρ = 1.025;\njulia> L_pp = 7.00;\njulia> B = 1.27;\njulia> d = 0.46;\njulia> nabla = 3.27;\njulia> x_G = 0.25;\njulia> # C_b = 0.810;\njulia> D_p = 0.216;\njulia> H_R = 0.345;\njulia> A_R = 0.0539;\njulia> t_P = 0.220;\njulia> w_P0 = 0.40;\njulia> m_x_dash = 0.022;\njulia> m_y_dash = 0.223;\njulia> J_z_dash = 0.011;\njulia> t_R = 0.387;\njulia> a_H = 0.312;\njulia> x_H_dash = -0.464;\njulia> γ_R_minus = 0.395;\njulia> γ_R_plus = 0.640;\njulia> l_r_dash = -0.710;\njulia> x_P_dash = -0.690;\njulia> ϵ = 1.09;\njulia> κ = 0.50;\njulia> f_α = 2.747;\njulia> basic_params = Mmg3DofBasicParams();\njulia> basic_params.L_pp = L_pp;  # 船長Lpp[m]\njulia> basic_params.B = B;  # 船幅[m]\njulia> basic_params.d = d;  # 喫水[m]\njulia> basic_params.x_G = x_G;  # 重心位置[]\njulia> basic_params.D_p = D_p;  # プロペラ直径[m]\njulia> basic_params.m = ρ * nabla;  # 質量(無次元化)[kg]\njulia> basic_params.I_zG = ρ * nabla * ((0.25 * L_pp)^2);  # 慣性モーメント[-]\njulia> basic_params.A_R = A_R;  # 船の断面に対する舵面積比[-]\njulia> basic_params.η = D_p / H_R;  # プロペラ直径に対する舵高さ(Dp/H)\njulia> basic_params.m_x = (0.5 * ρ * (L_pp^2) * d) * m_x_dash;  # 付加質量x(無次元)\njulia> basic_params.m_y = (0.5 * ρ * (L_pp^2) * d) * m_y_dash;  # 付加質量y(無次元)\njulia> basic_params.J_z = (0.5 * ρ * (L_pp^4) * d) * J_z_dash;  # 付加質量Izz(無次元)\njulia> basic_params.f_α = f_α; # 直圧力勾配係数\njulia> basic_params.ϵ = ϵ;  # プロペラ・舵位置伴流係数比\njulia> basic_params.t_R = t_R;  # 操縦抵抗減少率\njulia> basic_params.a_H = a_H;  # 舵力増加係数\njulia> basic_params.x_H = x_H_dash * L_pp;  # 舵力増分作用位置\njulia> basic_params.γ_R_minus = γ_R_minus;  # 整流係数\njulia> basic_params.γ_R_plus = γ_R_plus;  # 整流係数\njulia> basic_params.l_R = l_r_dash;  # 船長に対する舵位置\njulia> basic_params.κ = κ;  # 修正係数\njulia> basic_params.t_P = t_P;  # 推力減少率\njulia> basic_params.w_P0 = w_P0;  # 有効伴流率\njulia> basic_params.x_P = x_P_dash;  # 船長に対するプロペラ位置\njulia> maneuvering_params = Mmg3DofManeuveringParams();\njulia> maneuvering_params.k_0 = 0.2931;\njulia> maneuvering_params.k_1 = -0.2753;\njulia> maneuvering_params.k_2 = -0.1385;\njulia> maneuvering_params.R_0_dash = 0.022;\njulia> maneuvering_params.X_vv_dash = -0.040;\njulia> maneuvering_params.X_vr_dash = 0.002;\njulia> maneuvering_params.X_rr_dash = 0.011;\njulia> maneuvering_params.X_vvvv_dash = 0.771;\njulia> maneuvering_params.Y_v_dash = -0.315;\njulia> maneuvering_params.Y_r_dash = 0.083;\njulia> maneuvering_params.Y_vvv_dash = -1.607;\njulia> maneuvering_params.Y_vvr_dash = 0.379;\njulia> maneuvering_params.Y_vrr_dash = -0.391;\njulia> maneuvering_params.Y_rrr_dash = 0.008;\njulia> maneuvering_params.N_v_dash = -0.137;\njulia> maneuvering_params.N_r_dash = -0.049;\njulia> maneuvering_params.N_vvv_dash = -0.030;\njulia> maneuvering_params.N_vvr_dash = -0.294;\njulia> maneuvering_params.N_vrr_dash = 0.055;\njulia> maneuvering_params.N_rrr_dash = -0.013;\njulia> duration = 200; # [s]\njulia> max_δ_rad = 35 * pi / 180.0;  # [rad]\njulia> n_const = 17.95;  # [rpm]\njulia> sampling = duration * 10;\njulia> time_list = range(0.00, stop = duration, length = sampling);\njulia> δ_rad_list = max_δ_rad .* ones(Float64, sampling);\njulia> npm_list = n_const .* ones(Float64, sampling);\njulia> mmg_results = mmg_3dof_simulate(\n    time_list,\n    npm_list,\n    δ_rad_list,\n    basic_params,\n    maneuvering_params,\n    u0 = 2.29 * 0.512,\n    v0 = 0.0,\n    r0 = 0.0,\n);\n\n\n\n\n\n","category":"method"},{"location":"index.html#ShipMMG.mmg_3dof_zigzag_test-Tuple{Mmg3DofBasicParams, Mmg3DofManeuveringParams, Any, Float64, Float64, Float64, Float64}","page":"Home","title":"ShipMMG.mmg_3dof_zigzag_test","text":"mmg_3dof_zigzag_test(basic_params, maneuvering_params, npm_list, target_δ_rad, target_ψ_rad_deviation, time_second_interval, end_time_second, [, u0, v0, r0, ψ0, δ0, δ_rad_rate, start_time_second, algorithm, reltol, abstol]) -> final_δ_list, final_u_list, final_v_list, final_r_list, final_ψ_list\n\nReturns the MMG 3DOF zigzag simulation results.\n\nArguments\n\nbasic_params::Mmg3DofBasicParams: the basic parameters of target ship.\nmaneuvering_params::Mmg3DofManeuveringParams: the maneuvering parameters of target ship.\nnpm_list: the list of propeller rpm.\ntarget_δ_rad::Float64: target rudder angle of zigzag test.\ntarget_ψ_rad_deviation::Float64: target azimuth deviation of zigzag test.\ntime_second_interval::Float64: time interval of output result.\nend_time_second::Float64: the end time of simulation.\nu0::Float64=0.0: the initial x (surge) velocity.\nv0::Float64=0.0: the initial y (sway) velocity.\nr0::Float64=0.0: the initial rate of turn [rad/s].\nδ0::Float64=0.0: the initial rudder angle.\nδ_rad_rate::Float64=10.0*π/180: the change rate of rudder angle [rad/s]. \nρ::Float64=1.025: the seawater density [g/cm^3].\nstart_time_second::Float64=0.0: the start time of simulation.\nalgorithm=Tsit5(): the parameter of DifferentialEquations.ODEProblem.solve()\nreltol=1e-8: the parameter of DifferentialEquations.ODEProblem.solve()\nabstol=1e-8: the parameter of DifferentialEquations.ODEProblem.solve()\n\nExamples\n\nKVLCC2_L7 zigzag test.\n\njulia> ρ = 1.025;\njulia> L_pp = 7.00;\njulia> B = 1.27;\njulia> d = 0.46;\njulia> nabla = 3.27;\njulia> x_G = 0.25;\njulia> # C_b = 0.810;\njulia> D_p = 0.216;\njulia> H_R = 0.345;\njulia> A_R = 0.0539;\njulia> t_P = 0.220;\njulia> w_P0 = 0.40;\njulia> m_x_dash = 0.022;\njulia> m_y_dash = 0.223;\njulia> J_z_dash = 0.011;\njulia> t_R = 0.387;\njulia> a_H = 0.312;\njulia> x_H_dash = -0.464;\njulia> γ_R_minus = 0.395;\njulia> γ_R_plus = 0.640;\njulia> l_r_dash = -0.710;\njulia> x_P_dash = -0.690;\njulia> ϵ = 1.09;\njulia> κ = 0.50;\njulia> f_α = 2.747;\njulia> basic_params = Mmg3DofBasicParams();\njulia> basic_params.L_pp = L_pp;  # 船長Lpp[m]\njulia> basic_params.B = B;  # 船幅[m]\njulia> basic_params.d = d;  # 喫水[m]\njulia> basic_params.x_G = x_G;  # 重心位置[]\njulia> basic_params.D_p = D_p;  # プロペラ直径[m]\njulia> basic_params.m = ρ * nabla;  # 質量(無次元化)[kg]\njulia> basic_params.I_zG = ρ * nabla * ((0.25 * L_pp)^2);  # 慣性モーメント[-]\njulia> basic_params.A_R = A_R;  # 船の断面に対する舵面積比[-]\njulia> basic_params.η = D_p / H_R;  # プロペラ直径に対する舵高さ(Dp/H)\njulia> basic_params.m_x = (0.5 * ρ * (L_pp^2) * d) * m_x_dash;  # 付加質量x(無次元)\njulia> basic_params.m_y = (0.5 * ρ * (L_pp^2) * d) * m_y_dash;  # 付加質量y(無次元)\njulia> basic_params.J_z = (0.5 * ρ * (L_pp^4) * d) * J_z_dash;  # 付加質量Izz(無次元)\njulia> basic_params.f_α = f_α; # 直圧力勾配係数\njulia> basic_params.ϵ = ϵ;  # プロペラ・舵位置伴流係数比\njulia> basic_params.t_R = t_R;  # 操縦抵抗減少率\njulia> basic_params.a_H = a_H;  # 舵力増加係数\njulia> basic_params.x_H = x_H_dash * L_pp;  # 舵力増分作用位置\njulia> basic_params.γ_R_minus = γ_R_minus;  # 整流係数\njulia> basic_params.γ_R_plus = γ_R_plus;  # 整流係数\njulia> basic_params.l_R = l_r_dash;  # 船長に対する舵位置\njulia> basic_params.κ = κ;  # 修正係数\njulia> basic_params.t_P = t_P;  # 推力減少率\njulia> basic_params.w_P0 = w_P0;  # 有効伴流率\njulia> basic_params.x_P = x_P_dash;  # 船長に対するプロペラ位置\njulia> maneuvering_params = Mmg3DofManeuveringParams();\njulia> maneuvering_params.k_0 = 0.2931;\njulia> maneuvering_params.k_1 = -0.2753;\njulia> maneuvering_params.k_2 = -0.1385;\njulia> maneuvering_params.R_0_dash = 0.022;\njulia> maneuvering_params.X_vv_dash = -0.040;\njulia> maneuvering_params.X_vr_dash = 0.002;\njulia> maneuvering_params.X_rr_dash = 0.011;\njulia> maneuvering_params.X_vvvv_dash = 0.771;\njulia> maneuvering_params.Y_v_dash = -0.315;\njulia> maneuvering_params.Y_r_dash = 0.083;\njulia> maneuvering_params.Y_vvv_dash = -1.607;\njulia> maneuvering_params.Y_vvr_dash = 0.379;\njulia> maneuvering_params.Y_vrr_dash = -0.391;\njulia> maneuvering_params.Y_rrr_dash = 0.008;\njulia> maneuvering_params.N_v_dash = -0.137;\njulia> maneuvering_params.N_r_dash = -0.049;\njulia> maneuvering_params.N_vvv_dash = -0.030;\njulia> maneuvering_params.N_vvr_dash = -0.294;\njulia> maneuvering_params.N_vrr_dash = 0.055;\njulia> maneuvering_params.N_rrr_dash = -0.013;\njulia> target_δ_rad = 20.0 * π / 180.0\njulia> target_ψ_rad_deviation = 20.0 * π / 180.0\njulia> start_time_second = 0.00\njulia> time_second_interval = 0.01\njulia> end_time_second = 80.00\njulia> time_list = start_time_second:time_second_interval:end_time_second\njulia> n_const = 17.95  # [rpm]\njulia> npm_list = n_const * ones(Float64, length(time_list))\njulia> δ_list, u_list, v_list, r_list, ψ_list = mmg_3dof_zigzag_test(\n    basic_params,\n    maneuvering_params,\n    npm_list,\n    target_δ_rad,\n    target_ψ_rad_deviation,\n    time_second_interval,\n    end_time_second,\n);\n\n\n\n\n\n","category":"method"},{"location":"index.html#ShipMMG.simulate-Tuple{Any, Any, Any, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}","page":"Home","title":"ShipMMG.simulate","text":"mmg_3dof_simulate(time_list, npm_list, δ_list, L_pp, B, d, x_G, D_p, m, I_zG, A_R, η, m_x, m_y, J_z, f_α, ϵ, t_R, a_H, x_H, γ_R_minus, γ_R_plus, l_R, κ, t_P, w_P0, x_P, k_0, k_1, k_2, R_0_dash, X_vv_dash, X_vr_dash, X_rr_dash, X_vvvv_dash, Y_v_dash, Y_r_dash, Y_vvv_dash, Y_vvr_dash, Y_vrr_dash, Y_rrr_dash, N_v_dash, N_r_dash, N_vvv_dash, N_vvr_dash, N_vrr_dash, N_rrr_dash, [, u0, v0, r0, ρ, algorithm, reltol, abstol]) -> time, u, v, r, δ, npm\n\nReturns the MMG 3DOF simulation results including the lists of time, u, v, r, δ, npm. This function has the same logic of ShipMMG.mmg_3dof_simulate().\n\nArguments\n\ntime_list: the list of simulatino time.\nnpm_list: the list of propeller rpm.\nδ_list: the list of rudder angle [rad].\nL_pp::Float64: L_pp\nB::Float64: \nd::Float64:\nx_G::Float64: \nD_p::Float64: \nm::Float64: \nI_zG::Float64: \nA_R::Float64: \nη::Float64: \nm_x::Float64: \nm_y::Float64: \nJ_z::Float64: \nf_α::Float64: \nϵ::Float64: \nt_R::Float64: \na_H::Float64: \nx_H::Float64: \nγ_R_minus::Float64: \nγ_R_plus::Float64: \nl_R::Float64: \nκ::Float64: \nt_P::Float64: \nw_P0::Float64: \nx_P::Float64: \nk_0::Float64\nk_1::Float64\nk_2::Float64\nR_0_dash::Float64\nX_vv_dash::Float64\nX_vr_dash::Float64\nX_rr_dash::Float64\nX_vvvv_dash::Float64\nY_v_dash::Float64\nY_r_dash::Float64\nY_vvv_dash::Float64\nY_vvr_dash::Float64\nY_vrr_dash::Float64\nY_rrr_dash::Float64\nN_v_dash::Float64\nN_r_dash::Float64\nN_vvv_dash::Float64\nN_vvr_dash::Float64\nN_vrr_dash::Float64\nN_rrr_dash::Float64\nu0::Float64=0.0: the initial x (surge) velocity.\nv0::Float64=0.0: the initial y (sway) velocity.\nr0::Float64=0.0: the initial rate of turn [rad/s].\nρ::Float64=1.025: the seawater density [g/cm^3].\nalgorithm=Tsit5(): the parameter of DifferentialEquations.ODEProblem.solve()\nreltol=1e-8: the parameter of DifferentialEquations.ODEProblem.solve()\nabstol=1e-8: the parameter of DifferentialEquations.ODEProblem.solve()\n\n\n\n\n\n","category":"method"}]
}
